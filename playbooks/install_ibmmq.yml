---
- name: Instalar IBM MQ 9.3 (robusto e autoverificador)
  hosts: all
  become: true
  gather_facts: true

  vars:
    mq_user: mqm
    mq_group: mqm
    mq_base_dir: /opt/mqm
    mq_home: /home/mqm
    mq_bin_path: /opt/mqm/bin
    mq_install_dir: "{{ mq_home }}/IBM_MQ"
    repo_base_url: "http://54.196.155.119/repowmq/Linux"
    mq_fix_filename: "9.3.0.0-IBM-MQTRIAL-LinuxX64.tar.gz"
    qmgr_name: "QM1"
    mq_listener_port: 1414
    mq_svrconn_channel: "SVRCONN.APP"
    mq_extra_users: []

    mq_rpms_required:
      - MQSeriesRuntime-9.3.0-0.x86_64.rpm
      - MQSeriesGSKit-9.3.0-0.x86_64.rpm
      - MQSeriesServer-9.3.0-0.x86_64.rpm
      - MQSeriesClient-9.3.0-0.x86_64.rpm
      - MQSeriesSamples-9.3.0-0.x86_64.rpm
      - MQSeriesMan-9.3.0-0.x86_64.rpm
      - MQSeriesSDK-9.3.0-0.x86_64.rpm

  tasks:

    - name: Garantir conectividade
      ansible.builtin.wait_for_connection:
        timeout: 10

    - name: Dependências básicas
      ansible.builtin.dnf:
        name:
          - gcc
          - gcc-c++
          - make
          - pam
          - libstdc++
          - glibc
          - acl
        state: present

    - name: Criar grupo e usuário MQ
      ansible.builtin.user:
        name: "{{ mq_user }}"
        group: "{{ mq_group }}"
        create_home: true
        home: "{{ mq_home }}"
        shell: /bin/bash
        state: present

    - name: Criar diretório de trabalho
      ansible.builtin.file:
        path: "{{ mq_install_dir }}/download"
        state: directory
        owner: "{{ mq_user }}"
        group: "{{ mq_group }}"
        mode: '0755'

    - name: Baixar instalador MQ
      ansible.builtin.get_url:
        url: "{{ repo_base_url }}/{{ mq_fix_filename }}"
        dest: "{{ mq_install_dir }}/download/{{ mq_fix_filename }}"
        mode: '0644'

    - name: Verificar se MQServer contém RPMs válidos
      ansible.builtin.find:
        paths: "{{ mq_install_dir }}/MQServer"
        patterns: "MQSeries*.rpm"
        file_type: file
      register: mq_rpms_found
      ignore_errors: true

    - name: Remover MQServer vazio/corrompido
      ansible.builtin.file:
        path: "{{ mq_install_dir }}/MQServer"
        state: absent
      when: mq_rpms_found.matched | default(0) | int == 0

    - name: Extrair instalador IBM MQ
      ansible.builtin.unarchive:
        src: "{{ mq_install_dir }}/download/{{ mq_fix_filename }}"
        dest: "{{ mq_install_dir }}"
        remote_src: true
        owner: "{{ mq_user }}"
        group: "{{ mq_group }}"
        extra_opts: ["--overwrite"]

    - name: Aceitar licença antes da instalação
      ansible.builtin.command: ./mqlicense.sh -accept
      args:
        chdir: "{{ mq_install_dir }}/MQServer"
      become: true
      become_user: root
      register: license_accept
      changed_when: "'Agreement' in license_accept.stdout or 'accept' in license_accept.stdout"
      failed_when: false

    - name: Instalar pacotes essenciais do IBM MQ
      ansible.builtin.dnf:
        name: "{{ mq_install_dir }}/MQServer/{{ item }}"
        state: present
        disable_gpg_check: true
      loop: "{{ mq_rpms_required }}"

    - name: Verificar se dspmqver existe
      ansible.builtin.stat:
        path: "{{ mq_bin_path }}/dspmqver"
      register: dspmqver_bin

    - name: Forçar reextração e reinstalação se dspmqver ausente
      when: not dspmqver_bin.stat.exists
      block:
        - name: Limpar MQServer e /opt/mqm incompletos
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop:
            - "{{ mq_install_dir }}/MQServer"
            - "{{ mq_base_dir }}"
        - name: Reextrair pacote e reinstalar RPMs
          ansible.builtin.unarchive:
            src: "{{ mq_install_dir }}/download/{{ mq_fix_filename }}"
            dest: "{{ mq_install_dir }}"
            remote_src: true

    - name: Aceitar licença IBM MQ pós-instalação
      ansible.builtin.command: "./mqlicense -accept"
      args:
        chdir: "/opt/mqm/bin"
      changed_when: false
      failed_when: false

    - name: Garantir aceite de licença antes de criar QMGR
      ansible.builtin.shell: |
        if ! grep -q "AcceptLicense=Yes" /etc/opt/mqm/mqinst.ini 2>/dev/null; then
          echo "AcceptLicense=Yes" >> /etc/opt/mqm/mqinst.ini
        fi
      args:
        executable: /bin/bash
      become: true

    - name: Validar instalação
      ansible.builtin.command: "{{ mq_bin_path }}/dspmqver"
      register: mqver
      changed_when: false
      failed_when: mqver.rc != 0

    - name: Mostrar versão instalada
      ansible.builtin.debug:
        msg: "{{ mqver.stdout_lines }}"

    - name: Verificar existência do Queue Manager
      ansible.builtin.command: "{{ mq_bin_path }}/dspmq -m {{ qmgr_name }}"
      register: qmgr_check
      changed_when: false
      failed_when: false

    - name: Criar Queue Manager se não existir (parâmetros completos)
      ansible.builtin.command: "{{ mq_bin_path }}/crtmqm -u SYSTEM.DEAD.LETTER.QUEUE -lc -lf 4095 -lp 30 -ls 29 -q {{ qmgr_name }}"
      when: qmgr_check.rc != 0
      changed_when: true
      become: true
      become_user: "{{ mq_user }}"

    - name: Garantir QM iniciado
      ansible.builtin.command: "{{ mq_bin_path }}/strmqm {{ qmgr_name }}"
      become: true
      become_user: "{{ mq_user }}"
      register: strmqm_final
      changed_when: "'AMQ' in strmqm_final.stdout or 'AMQ' in strmqm_final.stderr"
      failed_when: false

    - name: Garantir stanza Channels no qm.ini
      ansible.builtin.lineinfile:
        path: "/var/mqm/qmgrs/{{ qmgr_name }}/qm.ini"
        line: "Channels:"
        state: present
        create: true
        owner: "{{ mq_user }}"
        group: "{{ mq_group }}"
        mode: '0644'
      become: true

    - name: Definir MaxActiveChannels no qm.ini
      ansible.builtin.lineinfile:
        path: "/var/mqm/qmgrs/{{ qmgr_name }}/qm.ini"
        insertafter: "^Channels:$"
        line: "  MaxActiveChannels=5000"
      become: true

    - name: Definir MaxChannels no qm.ini
      ansible.builtin.lineinfile:
        path: "/var/mqm/qmgrs/{{ qmgr_name }}/qm.ini"
        insertafter: "^Channels:$"
        line: "  MaxChannels=5000"
      become: true

    - name: Aplicar MQSC final (canais, listener, segurança)
      ansible.builtin.shell: |
        set -o pipefail
        cat << 'EOF' | {{ mq_bin_path }}/runmqsc {{ qmgr_name }}
        ALTER QMGR CCSID(1252) CHLAUTH(DISABLED)
        DEFINE CHANNEL(CHANNEL1) CHLTYPE(SVRCONN) MCAUSER('mqm') REPLACE
        DEFINE CHANNEL(MONITORACAO) CHLTYPE(SVRCONN) MCAUSER('mqm') REPLACE
        DEFINE CHANNEL({{ mq_svrconn_channel }}) CHLTYPE(SVRCONN) TRPTYPE(TCP) MCAUSER('mqm') REPLACE
        DEFINE LISTENER(LISTENER.TCP) TRPTYPE(TCP) CONTROL(QMGR) PORT({{ mq_listener_port }}) REPLACE
        START LISTENER(LISTENER.TCP)
        ALTER AUTHINFO(SYSTEM.DEFAULT.AUTHINFO.IDPWOS) AUTHTYPE(IDPWOS) CHCKCLNT(OPTIONAL)
        SET CHLAUTH(*) TYPE(BLOCKUSER) USERLIST('MQADMIN') ACTION(REMOVE)
        REFRESH SECURITY TYPE(CONNAUTH)
        EOF
      args:
        executable: /bin/bash
      become: true
      become_user: "{{ mq_user }}"
      register: mqsc_final
      changed_when: "mqsc_final.rc == 0"
      failed_when: false

    - name: Exibir saída MQSC final
      ansible.builtin.debug:
        msg: "{{ mqsc_final.stdout_lines | default([]) }}"

    - name: Adicionar usuário 'aeuser' ao grupo mqm (se existir)
      ansible.builtin.user:
        name: aeuser
        groups: "{{ mq_group }}"
        append: true
      failed_when: false

    - name: Reiniciar QM para consolidar alterações finais
      ansible.builtin.shell: |
        {{ mq_bin_path }}/endmqm -i {{ qmgr_name }} || true
        {{ mq_bin_path }}/strmqm {{ qmgr_name }}
      become: true
      become_user: "{{ mq_user }}"
      register: restart_final
      changed_when: "'AMQ' in restart_final.stdout or 'AMQ' in restart_final.stderr"
      failed_when: false
