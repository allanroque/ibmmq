---
- name: Instalar IBM MQ 9.3 (instalação padrão IBM)
  hosts: all
  become: true

  vars:
    mq_user: mqm
    mq_group: mqm
    mq_base_dir: /opt/mqm
    mq_home: /home/mqm
    mq_bin_path: /opt/mqm/bin
    mq_install_dir: "{{ mq_home }}/IBM_MQ"
    # Fonte de download (alinhado ao s_install_mq.yml)
    repo_base_url: "http://54.196.155.119/repowmq/Linux"
    mq_fix_filename: "9.3.0.0-IBM-MQTRIAL-LinuxX64.tar.gz"
    mq_fix_url: "{{ repo_base_url }}/{{ mq_fix_filename }}"
    mq_pkg_local: "{{ mq_install_dir }}/download/{{ mq_fix_filename }}"
    # QMGR básico
    qmgr_name: "QM1"
    mq_listener_port: 1414
    mq_svrconn_channel: "SVRCONN.APP"

    mq_rpms_required:
      - MQSeriesRuntime-9.3.0-0.x86_64.rpm
      - MQSeriesGSKit-9.3.0-0.x86_64.rpm
      - MQSeriesServer-9.3.0-0.x86_64.rpm
      - MQSeriesClient-9.3.0-0.x86_64.rpm
      - MQSeriesSamples-9.3.0-0.x86_64.rpm
      - MQSeriesMan-9.3.0-0.x86_64.rpm
      - MQSeriesSDK-9.3.0-0.x86_64.rpm

  tasks:

    - name: Validar conectividade SSH
      ansible.builtin.wait_for_connection:
        timeout: 10

    - name: Garantir dependências básicas instaladas
      ansible.builtin.dnf:
        name:
          - gcc
          - gcc-c++
          - make
          - pam
          - libstdc++
          - glibc
          - acl
        state: present

    - name: Criar grupo mqm
      ansible.builtin.group:
        name: "{{ mq_group }}"
        state: present

    - name: Criar usuário mqm
      ansible.builtin.user:
        name: "{{ mq_user }}"
        group: "{{ mq_group }}"
        home: "{{ mq_home }}"
        create_home: true
        shell: /bin/bash
        state: present

    - name: Criar diretório de download do instalador
      ansible.builtin.file:
        path: "{{ mq_install_dir }}/download"
        state: directory
        owner: "{{ mq_user }}"
        group: "{{ mq_group }}"
        mode: '0755'

    - name: Definir nome do arquivo do instalador
      ansible.builtin.set_fact:
        mq_fix_file_resolved: "{{ mq_fix_filename }}"

    - name: Baixar instalador do IBM MQ
      ansible.builtin.get_url:
        url: "{{ mq_fix_url }}"
        dest: "{{ mq_install_dir }}/download/{{ mq_fix_file_resolved }}"
        mode: '0644'

    - name: Ajustar caminho do pacote local para unarchive
      ansible.builtin.set_fact:
        mq_pkg_local: "{{ mq_install_dir }}/download/{{ mq_fix_file_resolved }}"

    - name: Criar diretórios base (se ainda não existirem)
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ mq_user }}"
        group: "{{ mq_group }}"
        mode: '0755'
      loop:
        - "{{ mq_base_dir }}"
        - "{{ mq_install_dir }}"

    - name: Extrair pacote IBM MQ (caso ainda não extraído)
      ansible.builtin.unarchive:
        src: "{{ mq_pkg_local }}"
        dest: "{{ mq_install_dir }}"
        remote_src: true
        owner: "{{ mq_user }}"
        group: "{{ mq_group }}"
      args:
        creates: "{{ mq_install_dir }}/MQServer"

    - name: Garantir permissões adequadas para instalação
      ansible.builtin.file:
        path: "{{ mq_install_dir }}"
        recurse: true
        owner: root
        group: root
        mode: '0755'

    - name: Aceitar licença IBM MQ antes da instalação
      ansible.builtin.command: "./mqlicense.sh -accept"
      args:
        chdir: "{{ mq_install_dir }}/MQServer"
      changed_when: false
      failed_when: false

    - name: Instalar pacotes essenciais do IBM MQ
      ansible.builtin.dnf:
        name: "{{ mq_install_dir }}/MQServer/{{ item }}"
        state: present
        disable_gpg_check: true
      loop: "{{ mq_rpms_required }}"

    - name: Aceitar licença IBM MQ pós-instalação
      ansible.builtin.command: "./mqlicense -accept"
      args:
        chdir: "/opt/mqm/bin"
      changed_when: false
      failed_when: false

    - name: Verificar versão instalada
      ansible.builtin.command: "{{ mq_bin_path }}/dspmqver"
      register: mqver
      changed_when: false

    - name: Exibir versão instalada do IBM MQ
      ansible.builtin.debug:
        msg: "{{ mqver.stdout_lines }}"

    - name: Criar Queue Manager básico se não existir
      ansible.builtin.command: "{{ mq_bin_path }}/crtmqm -q -u SYSTEM.DEAD.LETTER.QUEUE {{ qmgr_name }}"
      args:
        creates: "/var/mqm/qmgrs/{{ qmgr_name }}"
      become: true
      become_user: "{{ mq_user }}"

    - name: Iniciar Queue Manager
      ansible.builtin.command: "{{ mq_bin_path }}/strmqm {{ qmgr_name }}"
      become: true
      become_user: "{{ mq_user }}"
      register: strmqm_out
      changed_when: "'AMQ' in strmqm_out.stdout or 'AMQ' in strmqm_out.stderr"
      failed_when: false

    - name: Gerar MQSC com objetos básicos do QMGR
      ansible.builtin.copy:
        dest: "/tmp/{{ qmgr_name }}_base.mqsc"
        mode: '0644'
        content: |
          * Base definitions for {{ qmgr_name }}
          ALTER QMGR CHLAUTH(DISABLED)
          DEFINE CHANNEL({{ mq_svrconn_channel }}) CHLTYPE(SVRCONN) TRPTYPE(TCP) REPLACE
          DEFINE LISTENER(LISTENER.TCP) TRPTYPE(TCP) CONTROL(QMGR) PORT({{ mq_listener_port }}) REPLACE
          START LISTENER(LISTENER.TCP)
          REFRESH SECURITY TYPE(CONNAUTH)

    - name: Aplicar MQSC (objetos básicos)
      ansible.builtin.shell: "{{ mq_bin_path }}/runmqsc {{ qmgr_name }} < /tmp/{{ qmgr_name }}_base.mqsc"
      args:
        executable: /bin/bash
      become: true
      become_user: "{{ mq_user }}"
      register: mqsc_apply
      changed_when: "mqsc_apply.rc == 0"
      failed_when: false

    - name: Mostrar saída da aplicação MQSC
      ansible.builtin.debug:
        msg: "{{ mqsc_apply.stdout_lines }}"
