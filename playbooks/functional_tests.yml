---
- name: "Testes Funcionais - Etapa 9"
  hosts: mq_servers
  become: yes
  vars_files:
    - vars/vars.yml
  
  tasks:
    - name: "Teste 1 - Conectividade básica com QMs"
      shell: |
        for qm in $(dspmq | grep -o 'QMNAME([^)]*)' | sed 's/QMNAME(\(.*\))/\1/'); do
          echo "DISPLAY QMGR" | runmqsc $qm 2>/dev/null | head -1
        done
      register: test_connectivity
      ignore_errors: true

    - name: "Teste 2 - Criação e remoção de fila temporária"
      shell: |
        for qm in $(dspmq | grep -o 'QMNAME([^)]*)' | sed 's/QMNAME(\(.*\))/\1/'); do
          echo "DEFINE QLOCAL(TEST.QUEUE.{{ ansible_date_time.epoch }})"
          echo "DELETE QLOCAL(TEST.QUEUE.{{ ansible_date_time.epoch }})"
        done | runmqsc $qm 2>/dev/null
      register: test_queue_operations
      ignore_errors: true

    - name: "Teste 3 - Envio e recebimento de mensagem"
      shell: |
        for qm in $(dspmq | grep -o 'QMNAME([^)]*)' | sed 's/QMNAME(\(.*\))/\1/'); do
          # Criar fila temporária
          echo "DEFINE QLOCAL(TEST.MSG.{{ ansible_date_time.epoch }})" | runmqsc $qm
          # Enviar mensagem
          echo "Teste de mensagem - {{ ansible_date_time.iso8601 }}" | /opt/mqm/samp/bin/amqsput TEST.MSG.{{ ansible_date_time.epoch }} $qm
          # Receber mensagem
          echo "" | /opt/mqm/samp/bin/amqsget TEST.MSG.{{ ansible_date_time.epoch }} $qm
          # Remover fila
          echo "DELETE QLOCAL(TEST.MSG.{{ ansible_date_time.epoch }})" | runmqsc $qm
        done
      register: test_message_flow
      ignore_errors: true

    - name: "Teste 4 - Verificar canais"
      shell: |
        for qm in $(dspmq | grep -o 'QMNAME([^)]*)' | sed 's/QMNAME(\(.*\))/\1/'); do
          echo "DISPLAY CHSTATUS(*)" | runmqsc $qm 2>/dev/null | grep -c "CHANNEL(" || echo "0"
        done
      register: test_channels
      ignore_errors: true

    - name: "Teste 5 - Verificar listeners"
      shell: |
        for qm in $(dspmq | grep -o 'QMNAME([^)]*)' | sed 's/QMNAME(\(.*\))/\1/'); do
          echo "DISPLAY LISTENER(*)" | runmqsc $qm 2>/dev/null | grep -c "LISTENER(" || echo "0"
        done
      register: test_listeners
      ignore_errors: true

    - name: "Teste 6 - Performance básica"
      shell: |
        for qm in $(dspmq | grep -o 'QMNAME([^)]*)' | sed 's/QMNAME(\(.*\))/\1/'); do
          start_time=$(date +%s.%N)
          echo "DISPLAY QMGR" | runmqsc $qm >/dev/null 2>&1
          end_time=$(date +%s.%N)
          echo "Response time: $(echo "$end_time - $start_time" | bc) seconds"
        done
      register: test_performance
      ignore_errors: true

    - name: "Teste 7 - Verificar autorizações"
      shell: |
        for qm in $(dspmq | grep -o 'QMNAME([^)]*)' | sed 's/QMNAME(\(.*\))/\1/'); do
          echo "DISPLAY AUTHINFO(*)" | runmqsc $qm 2>/dev/null | grep -c "AUTHINFO(" || echo "0"
        done
      register: test_authorizations
      ignore_errors: true

    - name: "Teste 8 - Verificar dead letter queue"
      shell: |
        for qm in $(dspmq | grep -o 'QMNAME([^)]*)' | sed 's/QMNAME(\(.*\))/\1/'); do
          echo "DISPLAY QLOCAL(SYSTEM.DEAD.LETTER.QUEUE)" | runmqsc $qm 2>/dev/null | grep -c "QUEUE(" || echo "0"
        done
      register: test_dlq
      ignore_errors: true

    - name: "Teste 9 - Verificar logs de sistema"
      shell: |
        find /var/mqm -name "*.log" -mtime -1 -exec ls -la {} \; | wc -l
      register: test_system_logs
      ignore_errors: true

    - name: "Teste 10 - Verificar integridade dos dados"
      shell: |
        for qm in $(dspmq | grep -o 'QMNAME([^)]*)' | sed 's/QMNAME(\(.*\))/\1/'); do
          echo "DISPLAY QMSTATUS" | runmqsc $qm 2>/dev/null | grep -i "status" || echo "Status não disponível"
        done
      register: test_data_integrity
      ignore_errors: true

    - name: "Executar teste de carga básica"
      shell: |
        for qm in $(dspmq | grep -o 'QMNAME([^)]*)' | sed 's/QMNAME(\(.*\))/\1/'); do
          # Criar fila para teste de carga
          echo "DEFINE QLOCAL(LOAD.TEST.{{ ansible_date_time.epoch }})" | runmqsc $qm
          
          # Enviar 10 mensagens
          for i in {1..10}; do
            echo "Mensagem de teste $i - {{ ansible_date_time.iso8601 }}" | /opt/mqm/samp/bin/amqsput LOAD.TEST.{{ ansible_date_time.epoch }} $qm
          done
          
          # Verificar profundidade da fila
          echo "DISPLAY QLOCAL(LOAD.TEST.{{ ansible_date_time.epoch }}) CURDEPTH" | runmqsc $qm
          
          # Limpar fila
          echo "DELETE QLOCAL(LOAD.TEST.{{ ansible_date_time.epoch }})" | runmqsc $qm
        done
      register: test_load
      ignore_errors: true

    - name: "Criar relatório de testes funcionais"
      copy:
        content: |
          # Relatório de Testes Funcionais
          Data: {{ ansible_date_time.iso8601 }}
          Host: {{ inventory_hostname }}
          Versão Update: {{ updatemq_version }}
          
          ## Resultados dos Testes:
          
          ### Teste 1 - Conectividade:
          - Status: {{ 'SUCESSO' if test_connectivity.rc == 0 else 'FALHA' }}
          - Detalhes: {{ test_connectivity.stdout if test_connectivity.stdout is defined else 'N/A' }}
          
          ### Teste 2 - Operações de Fila:
          - Status: {{ 'SUCESSO' if test_queue_operations.rc == 0 else 'FALHA' }}
          - Detalhes: {{ test_queue_operations.stdout if test_queue_operations.stdout is defined else 'N/A' }}
          
          ### Teste 3 - Fluxo de Mensagens:
          - Status: {{ 'SUCESSO' if test_message_flow.rc == 0 else 'FALHA' }}
          - Detalhes: {{ test_message_flow.stdout if test_message_flow.stdout is defined else 'N/A' }}
          
          ### Teste 4 - Canais:
          - Status: {{ 'SUCESSO' if test_channels.rc == 0 else 'FALHA' }}
          - Canais Encontrados: {{ test_channels.stdout_lines | sum if test_channels.stdout_lines is defined else '0' }}
          
          ### Teste 5 - Listeners:
          - Status: {{ 'SUCESSO' if test_listeners.rc == 0 else 'FALHA' }}
          - Listeners Encontrados: {{ test_listeners.stdout_lines | sum if test_listeners.stdout_lines is defined else '0' }}
          
          ### Teste 6 - Performance:
          - Status: {{ 'SUCESSO' if test_performance.rc == 0 else 'FALHA' }}
          - Tempo de Resposta: {{ test_performance.stdout if test_performance.stdout is defined else 'N/A' }}
          
          ### Teste 7 - Autorizações:
          - Status: {{ 'SUCESSO' if test_authorizations.rc == 0 else 'FALHA' }}
          - Autorizações: {{ test_authorizations.stdout_lines | sum if test_authorizations.stdout_lines is defined else '0' }}
          
          ### Teste 8 - Dead Letter Queue:
          - Status: {{ 'SUCESSO' if test_dlq.rc == 0 else 'FALHA' }}
          - DLQ Disponível: {{ test_dlq.stdout_lines | sum if test_dlq.stdout_lines is defined else '0' }}
          
          ### Teste 9 - Logs do Sistema:
          - Status: {{ 'SUCESSO' if test_system_logs.rc == 0 else 'FALHA' }}
          - Logs Encontrados: {{ test_system_logs.stdout if test_system_logs.stdout is defined else '0' }}
          
          ### Teste 10 - Integridade dos Dados:
          - Status: {{ 'SUCESSO' if test_data_integrity.rc == 0 else 'FALHA' }}
          - Detalhes: {{ test_data_integrity.stdout if test_data_integrity.stdout is defined else 'N/A' }}
          
          ### Teste de Carga:
          - Status: {{ 'SUCESSO' if test_load.rc == 0 else 'FALHA' }}
          - Detalhes: {{ test_load.stdout if test_load.stdout is defined else 'N/A' }}
          
          ## Resumo dos Testes:
          - Testes Executados: 11
          - Sucessos: {{ [test_connectivity.rc == 0, test_queue_operations.rc == 0, test_message_flow.rc == 0, test_channels.rc == 0, test_listeners.rc == 0, test_performance.rc == 0, test_authorizations.rc == 0, test_dlq.rc == 0, test_system_logs.rc == 0, test_data_integrity.rc == 0, test_load.rc == 0] | select('equalto', true) | list | length }}
          - Falhas: {{ [test_connectivity.rc != 0, test_queue_operations.rc != 0, test_message_flow.rc != 0, test_channels.rc != 0, test_listeners.rc != 0, test_performance.rc != 0, test_authorizations.rc != 0, test_dlq.rc != 0, test_system_logs.rc != 0, test_data_integrity.rc != 0, test_load.rc != 0] | select('equalto', true) | list | length }}
          
          ## Status Geral:
          - Testes Funcionais: {{ 'SUCESSO' if [test_connectivity.rc == 0, test_queue_operations.rc == 0, test_message_flow.rc == 0, test_channels.rc == 0, test_listeners.rc == 0, test_performance.rc == 0, test_authorizations.rc == 0, test_dlq.rc == 0, test_system_logs.rc == 0, test_data_integrity.rc == 0, test_load.rc == 0] | select('equalto', true) | list | length >= 8 else 'FALHA' }}
        dest: "/var/log/ansible/updatemq/updatemq_{{ updatemq_version }}/functional_tests_{{ ansible_date_time.iso8601_basic }}.txt"
        owner: mqm
        group: mqm
        mode: '0644'

    - name: "Mostrar resumo dos testes funcionais"
      debug:
        msg: |
          === TESTES FUNCIONAIS ===
          Host: {{ inventory_hostname }}
          Testes Executados: 11
          Sucessos: {{ [test_connectivity.rc == 0, test_queue_operations.rc == 0, test_message_flow.rc == 0, test_channels.rc == 0, test_listeners.rc == 0, test_performance.rc == 0, test_authorizations.rc == 0, test_dlq.rc == 0, test_system_logs.rc == 0, test_data_integrity.rc == 0, test_load.rc == 0] | select('equalto', true) | list | length }}
          Falhas: {{ [test_connectivity.rc != 0, test_queue_operations.rc != 0, test_message_flow.rc != 0, test_channels.rc != 0, test_listeners.rc != 0, test_performance.rc != 0, test_authorizations.rc != 0, test_dlq.rc != 0, test_system_logs.rc != 0, test_data_integrity.rc != 0, test_load.rc != 0] | select('equalto', true) | list | length }}
          Status: {{ 'SUCESSO' if [test_connectivity.rc == 0, test_queue_operations.rc == 0, test_message_flow.rc == 0, test_channels.rc == 0, test_listeners.rc == 0, test_performance.rc == 0, test_authorizations.rc == 0, test_dlq.rc == 0, test_system_logs.rc == 0, test_data_integrity.rc == 0, test_load.rc == 0] | select('equalto', true) | list | length >= 8 else 'FALHA' }}

    - name: "Registrar resultado dos testes funcionais"
      set_fact:
        functional_tests_result:
          total_tests: 11
          successful_tests: "{{ [test_connectivity.rc == 0, test_queue_operations.rc == 0, test_message_flow.rc == 0, test_channels.rc == 0, test_listeners.rc == 0, test_performance.rc == 0, test_authorizations.rc == 0, test_dlq.rc == 0, test_system_logs.rc == 0, test_data_integrity.rc == 0, test_load.rc == 0] | select('equalto', true) | list | length }}"
          failed_tests: "{{ [test_connectivity.rc != 0, test_queue_operations.rc != 0, test_message_flow.rc != 0, test_channels.rc != 0, test_listeners.rc != 0, test_performance.rc != 0, test_authorizations.rc != 0, test_dlq.rc != 0, test_system_logs.rc != 0, test_data_integrity.rc != 0, test_load.rc != 0] | select('equalto', true) | list | length }}"
          status: "{{ 'success' if [test_connectivity.rc == 0, test_queue_operations.rc == 0, test_message_flow.rc == 0, test_channels.rc == 0, test_listeners.rc == 0, test_performance.rc == 0, test_authorizations.rc == 0, test_dlq.rc == 0, test_system_logs.rc == 0, test_data_integrity.rc == 0, test_load.rc == 0] | select('equalto', true) | list | length >= 8 else 'failed' }}"
