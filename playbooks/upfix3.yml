---
- name: Coleta de visibilidade IBM MQ
  hosts: mq_servers
  gather_facts: yes
  environment:
    PATH: "/opt/mqm/bin:{{ ansible_env.PATH }}"
  vars_files:
    - vars/vars.yml
    
  tasks:

    - name: Versão do MQ (raw)
      command: dspmqver
      register: mq_version_raw

    - name: Inicializar dict da versão
      set_fact:
        mq_version: {}

    - name: Popular dict da versão
      set_fact:
        mq_version: "{{ mq_version | combine({ (item.split(':', 1)[0] | trim) : (item.split(':', 1)[1] | default('') | trim) }) }}"
      loop: "{{ mq_version_raw.stdout_lines | select('search', ':') | list }}"

    - name: Queue Managers disponíveis
      command: dspmq
      register: qmgrs_raw

    - name: Extrair QMgrs com status
      set_fact:
        qmgrs_info: "{{ qmgrs_info | default([]) + [ {'name': (item.split('|')[0]), 'status': (item.split('|')[1] | default('')) } ] }}"
      loop: >-
        {{
          qmgrs_raw.stdout_lines
          | select('search', 'QMNAME')
          | map('regex_replace', '^.*QMNAME\\(([^)]+)\\).*STATUS\\(([^)]+)\\).*$', '\\1|\\2')
          | list
        }}

    - name: Filtrar apenas QMgrs ativos
      set_fact:
        qmgrs_running: "{{ qmgrs_info | selectattr('status','equalto','Running') | map(attribute='name') | list }}"

    - name: Listar canais dos QMgrs ativos
      shell: "echo 'DISPLAY CHSTATUS(*)' | runmqsc {{ item }}"
      loop: "{{ qmgrs_running }}"
      register: mq_channels
      when: qmgrs_running | length > 0

    - name: Listar filas dos QMgrs ativos
      shell: "echo 'DISPLAY QLOCAL(*) CURDEPTH MAXDEPTH' | runmqsc {{ item }}"
      loop: "{{ qmgrs_running }}"
      register: mq_queues
      when: qmgrs_running | length > 0

    - name: Listar listeners dos QMgrs ativos
      shell: "echo 'DISPLAY LISTENER(*)' | runmqsc {{ item }}"
      loop: "{{ qmgrs_running }}"
      register: mq_listeners
      when: qmgrs_running | length > 0

    - name: Consolidar resultado
      debug:
        var: mq_health

    - name: Consolidar resultado
      set_fact:
        mq_health:
          host: "{{ inventory_hostname }}"
          collected_at: "{{ ansible_date_time.iso8601 }}"
          version: "{{ mq_version }}"
          qmgrs_all: "{{ qmgrs_info }}"
          qmgrs_running: "{{ qmgrs_running }}"
          channels: "{{ mq_channels.results | map(attribute='stdout_lines') | list if qmgrs_running|length > 0 else [] }}"
          queues: "{{ mq_queues.results | map(attribute='stdout_lines') | list if qmgrs_running|length > 0 else [] }}"
          listeners: "{{ mq_listeners.results | map(attribute='stdout_lines') | list if qmgrs_running|length > 0 else [] }}"

    - name: Mostrar resultado na tela
      debug:
        var: mq_health

    - name: Salvar resultado em arquivo JSON
      copy:
        content: "{{ mq_health | to_nice_json }}"
        dest: "/tmp/mq_health_{{ inventory_hostname }}.json"

- name: Registrar no Controller
  hosts: localhost
  connection: local
  tasks:
    - name: Registrar resultado do MQ no inventário do AAP
      ansible.controller.host:
        name: "{{ hostvars['mq01'].inventory_hostname }}"
        inventory: "INV-MQ"
        state: present
        enabled: true
        variables:
          ansible_host: "{{ hostvars['mq01'].ansible_host }}"
          mq_health: "{{ hostvars['mq01'].mq_health }}"