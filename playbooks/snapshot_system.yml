---
- name: "Snapshot do Sistema - Etapa 5"
  hosts: mq_servers
  become: yes
  vars_files:
    - vars/vars.yml
  
  tasks:
    - name: "Verificar se LVM está disponível"
      command: vgs
      register: lvm_check
      ignore_errors: true
      changed_when: false

    - name: "Criar snapshot LVM (se disponível)"
      shell: |
        # Identificar volume group do MQ
        VG=$(df /var/mqm | tail -1 | awk '{print $1}' | sed 's/[0-9]*$//' | xargs lvs --noheadings -o vg_name)
        LV=$(df /var/mqm | tail -1 | awk '{print $1}' | sed 's/.*\///')
        
        # Criar snapshot
        lvcreate -L 10G -s -n mq_snapshot_{{ updatemq_version }}_{{ ansible_date_time.iso8601_basic }} /dev/$VG/$LV
      register: lvm_snapshot
      when: lvm_check.rc == 0
      ignore_errors: true

    - name: "Criar snapshot usando rsync (fallback)"
      shell: |
        rsync -av --delete /var/mqm/ /var/backup/mq/snapshots/mq_snapshot_{{ updatemq_version }}_{{ ansible_date_time.iso8601_basic }}/
      register: rsync_snapshot
      when: lvm_snapshot.rc != 0 or lvm_snapshot is not defined
      ignore_errors: true

    - name: "Criar snapshot do sistema de arquivos"
      shell: |
        # Para sistemas com suporte a snapshots (btrfs, zfs, etc)
        if command -v btrfs >/dev/null 2>&1; then
          btrfs subvolume snapshot /var/mqm /var/backup/mq/btrfs_snapshot_{{ updatemq_version }}_{{ ansible_date_time.iso8601_basic }}
        elif command -v zfs >/dev/null 2>&1; then
          zfs snapshot $(df /var/mqm | tail -1 | awk '{print $1}')@mq_{{ updatemq_version }}_{{ ansible_date_time.iso8601_basic }}
        fi
      register: fs_snapshot
      ignore_errors: true

    - name: "Criar snapshot da configuração do sistema"
      shell: |
        tar -czf /var/backup/mq/system_config_{{ updatemq_version }}_{{ ansible_date_time.iso8601_basic }}.tar.gz \
        /etc/mqm \
        /etc/security/limits.d/*mqm* \
        /etc/systemd/system/*mqm* \
        /etc/profile.d/*mqm*
      register: system_config_snapshot
      ignore_errors: true

    - name: "Documentar snapshot criado"
      copy:
        content: |
          # Snapshot do Sistema IBM MQ
          Data: {{ ansible_date_time.iso8601 }}
          Host: {{ inventory_hostname }}
          Versão Update: {{ updatemq_version }}
          
          ## Métodos de Snapshot Utilizados:
          {% if lvm_snapshot.rc == 0 %}
          - LVM Snapshot: {{ lvm_snapshot.stdout }}
          {% endif %}
          {% if rsync_snapshot is defined and rsync_snapshot.rc == 0 %}
          - Rsync Snapshot: /var/backup/mq/snapshots/mq_snapshot_{{ updatemq_version }}_{{ ansible_date_time.iso8601_basic }}/
          {% endif %}
          {% if fs_snapshot.rc == 0 %}
          - Filesystem Snapshot: {{ fs_snapshot.stdout }}
          {% endif %}
          - System Config: /var/backup/mq/system_config_{{ updatemq_version }}_{{ ansible_date_time.iso8601_basic }}.tar.gz
          
          ## Informações do Sistema:
          - Versão MQ: {{ mq_health.version.Version | default('N/A') }}
          - Queue Managers: {{ mq_health.qmgrs_running | default([]) | join(', ') }}
          - Uptime: {{ ansible_uptime_seconds | int // 3600 }} horas
        dest: "/var/backup/mq/snapshot_info_{{ updatemq_version }}_{{ ansible_date_time.iso8601_basic }}.txt"
        owner: mqm
        group: mqm
        mode: '0644'

    - name: "Verificar espaço em disco após snapshot"
      shell: df -h /var
      register: disk_usage_after

    - name: "Mostrar informações do snapshot"
      debug:
        msg: |
          Snapshot do sistema criado com sucesso!
          Métodos utilizados:
          {% if lvm_snapshot.rc == 0 %}
          - LVM: {{ lvm_snapshot.stdout }}
          {% endif %}
          {% if rsync_snapshot is defined and rsync_snapshot.rc == 0 %}
          - Rsync: Concluído
          {% endif %}
          {% if fs_snapshot.rc == 0 %}
          - Filesystem: {{ fs_snapshot.stdout }}
          {% endif %}
          - Configuração: Concluído
          
          Uso de disco após snapshot:
          {{ disk_usage_after.stdout }}

    - name: "Registrar informações do snapshot"
      set_fact:
        snapshot_info:
          timestamp: "{{ ansible_date_time.iso8601_basic }}"
          methods: "{{ ['lvm', 'rsync', 'fs', 'config'] | select('in', ['lvm' if lvm_snapshot.rc == 0 else '', 'rsync' if rsync_snapshot is defined and rsync_snapshot.rc == 0 else '', 'fs' if fs_snapshot.rc == 0 else '', 'config' if system_config_snapshot.rc == 0 else '']) | list }}"
          status: "success"
