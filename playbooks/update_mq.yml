---
- name: Atualização controlada do IBM MQ para versão 9.4
  hosts: all
  become: true

  vars:
    mq_user: mqm
    mq_group: mqm
    mq_bin_path: /opt/mqm/bin
    mq_home: /home/mqm
    mq_install_dir: "{{ mq_home }}/IBM_MQ"
    mq_pkg_local: "9.4.0.10-IBM-MQTRIAL-LinuxX64.tar.gz"
    mq_backup_dir: "/tmp/mq_backup_{{ ansible_date_time.date }}_{{ ansible_date_time.hour }}{{ ansible_date_time.minute }}"

    mq_rpms_old:
      - MQSeriesSDK-9.3.0-0.x86_64
      - MQSeriesMan-9.3.0-0.x86_64
      - MQSeriesSamples-9.3.0-0.x86_64
      - MQSeriesClient-9.3.0-0.x86_64
      - MQSeriesServer-9.3.0-0.x86_64
      - MQSeriesGSKit-9.3.0-0.x86_64
      - MQSeriesRuntime-9.3.0-0.x86_64

    mq_rpms_new:
      - MQSeriesRuntime-9.4.0-10.x86_64.rpm
      - MQSeriesGSKit-9.4.0-10.x86_64.rpm
      - MQSeriesServer-9.4.0-10.x86_64.rpm
      - MQSeriesClient-9.4.0-10.x86_64.rpm
      - MQSeriesSamples-9.4.0-10.x86_64.rpm
      - MQSeriesMan-9.4.0-10.x86_64.rpm
      - MQSeriesSDK-9.4.0-10.x86_64.rpm

  tasks:

    - name: Etapa 0 - Validar versão mínima do RHEL (8.8+)
      ansible.builtin.command: cat /etc/redhat-release
      register: rhel_version
      changed_when: false

    - name: Exibir versão do sistema
      ansible.builtin.debug:
        msg: "{{ rhel_version.stdout_lines }}"

    - name: Bloquear execução se versão do RHEL < 8.8
      ansible.builtin.assert:
        that:
          - "'release 8.8' in rhel_version.stdout
             or 'release 8.9' in rhel_version.stdout
             or 'release 9' in rhel_version.stdout
             or 'release 10' in rhel_version.stdout"
        fail_msg: "XXXXX A versão do sistema é inferior a RHEL 8.8. O IBM MQ 9.4 requer RHEL 8.8 ou superior."

    - name: Etapa 1 - Exibir Queue Managers ativos
      ansible.builtin.command: "{{ mq_bin_path }}/dspmq"
      become_user: "{{ mq_user }}"
      register: qmgr_list
      changed_when: false
      ignore_errors: true

    - name: Exibir lista de Queue Managers
      ansible.builtin.debug:
        msg: "{{ qmgr_list.stdout_lines | default(['Nenhum QM ativo.']) }}"

    - name: Etapa 2 - Parar todos os Queue Managers ativos
      ansible.builtin.shell: |
        for qm in $({{ mq_bin_path }}/dspmq 2>/dev/null | awk '{print $1}' | sed 's/QMNAME(//;s/)//'); do
          echo "Parando $qm..."
          {{ mq_bin_path }}/endmqm -w $qm || true
        done
      become_user: "{{ mq_user }}"
      register: stop_qm
      changed_when: "'AMQ' in stop_qm.stdout or 'ended normally' in stop_qm.stdout"
      ignore_errors: true

    - name: Etapa 3 - Criar backup dos logs e QMs
      ansible.builtin.shell: |
        mkdir -p {{ mq_backup_dir }}
        cp -a /var/mqm/log {{ mq_backup_dir }}/ || true
        cp -a /var/mqm/qmgrs {{ mq_backup_dir }}/ || true
      changed_when: true

    - name: Exibir local do backup
      ansible.builtin.debug:
        msg: "Backup armazenado em {{ mq_backup_dir }}"

    - name: Verificar se o pacote MQ 9.4 já existe no servidor
      ansible.builtin.stat:
        path: "{{ mq_install_dir }}/ibmmq_9.4.tar.gz"
      register: pkg_exists

    - name: Verificar se o pacote MQ 9.4 já está disponível localmente ou remotamente
      block:
        - name: Copiar pacote IBM MQ 9.4 (se necessário, apenas se não existir)
          ansible.builtin.copy:
            src: "{{ mq_pkg_local }}"
            dest: "{{ mq_install_dir }}/ibmmq_9.4.tar.gz"
            mode: '0644'
            owner: "{{ mq_user }}"
            group: "{{ mq_group }}"
          when:
            - not pkg_exists.stat.exists
            - mq_pkg_local is defined
            - mq_pkg_local | length > 0
      rescue:
        - name: Pacote já existente no servidor — prosseguir
          ansible.builtin.debug:
            msg: "Pacote já está presente em {{ mq_install_dir }}/ibmmq_9.4.tar.gz, não foi copiado."

    - name: Detectar versão atual do IBM MQ instalada
      ansible.builtin.shell: |
        if [ -x /opt/mqm/bin/dspmqver ]; then
          /opt/mqm/bin/dspmqver | grep -E '^Version'
        else
          echo "Versão não detectada"
        fi
      register: mq_current_ver
      changed_when: false
      ignore_errors: true

    - name: Exibir versão atual detectada
      ansible.builtin.debug:
        msg: "{{ mq_current_ver.stdout | default('Versão não encontrada') }}"

    - name: Extrair pacote IBM MQ 9.4 (somente se versão atual for 9.3)
      ansible.builtin.unarchive:
        src: "{{ mq_install_dir }}/9.4.0.10-IBM-MQTRIAL-LinuxX64.tar.gz"
        dest: "{{ mq_install_dir }}"
        remote_src: true
        owner: "{{ mq_user }}"
        group: "{{ mq_group }}"
        extra_opts:
          - "--overwrite"
      when:
        - "'9.3' in mq_current_ver.stdout"
      register: extract_mq
      
    - name: Garantir permissões adequadas para instalação
      ansible.builtin.file:
        path: "{{ mq_install_dir }}"
        recurse: yes
        owner: root
        group: root
        mode: '0755'

    - name: Aceitar licença IBM MQ (pré-instalação - mqlicense.sh)
      ansible.builtin.command: "./mqlicense.sh -accept"
      args:
        chdir: "{{ mq_install_dir }}/MQServer"
      changed_when: false
      ignore_errors: yes

    - name: Etapa 4 - Remover pacotes antigos do MQ (9.3)
      ansible.builtin.dnf:
        name: "{{ mq_rpms_old }}"
        state: absent
      ignore_errors: true

    - name: Etapa 5 - Instalar pacotes da nova versão (9.4)
      ansible.builtin.dnf:
        name: "{{ mq_install_dir }}/MQServer/{{ item }}"
        state: present
        disable_gpg_check: true
      loop: "{{ mq_rpms_new }}"
      register: install_new
      ignore_errors: true

    - name: Aceitar licença pós-instalação
      ansible.builtin.command: "./mqlicense -accept"
      args:
        chdir: "/opt/mqm/bin"
      changed_when: false
      ignore_errors: yes

    - name: Etapa 6 - Verificar versão instalada do IBM MQ
      ansible.builtin.command: "{{ mq_bin_path }}/dspmqver"
      become_user: "{{ mq_user }}"
      register: mqver
      changed_when: false
      ignore_errors: true

    - name: Exibir versão atual do IBM MQ
      ansible.builtin.debug:
        msg: "{{ mqver.stdout_lines | default(['Não foi possível verificar a versão.']) }}"

    - name: Etapa 7 - Reiniciar Queue Managers
      ansible.builtin.shell: |
        for qm in $({{ mq_bin_path }}/dspmq 2>/dev/null | awk '{print $1}' | sed 's/QMNAME(//;s/)//'); do
          echo "Iniciando $qm..."
          {{ mq_bin_path }}/strmqm $qm || true
        done
      become_user: "{{ mq_user }}"
      register: start_qm
      changed_when: "'AMQ' in start_qm.stdout"
      ignore_errors: true

    - name: Exibir status dos Queue Managers
      ansible.builtin.command: "{{ mq_bin_path }}/dspmq"
      become_user: "{{ mq_user }}"
      register: qmgr_status
      changed_when: false
      ignore_errors: true

    - name: Etapa 8 - Testar fila e conexão pós-upgrade
      ansible.builtin.shell: |
        echo "Upgrade MQ 9.4 concluído com sucesso!" | /opt/mqm/samp/bin/amqsput TEST.QUEUE QM1 || true
      become_user: "{{ mq_user }}"
      register: msg_test
      changed_when: false
      ignore_errors: true

#    - name: Exibir resultado do teste final
#      ansible.builtin.debug:
#        msg: "{{ msg_test.stdout_lines | default(['Teste executado.']) }}"

    - name: Verificar versão instalada
      ansible.builtin.command: /opt/mqm/bin/dspmqver
      register: mqver
      changed_when: false

    - name: Exibir versão instalada do IBM MQ
      ansible.builtin.debug:
        msg: "{{ mqver.stdout_lines }}"