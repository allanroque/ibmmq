---
- name: "Rollback do IBM MQ - Procedimento de Emergência"
  hosts: mq_servers
  become: yes
  vars_files:
    - vars/vars.yml
  
  tasks:
    - name: "Verificar se existem backups disponíveis"
      find:
        paths: "/var/backup/mq"
        patterns: "*backup_{{ updatemq_version }}*"
      register: available_backups

    - name: "Parar todos os Queue Managers"
      shell: |
        for qm in $(dspmq | grep -o 'QMNAME([^)]*)' | sed 's/QMNAME(\(.*\))/\1/'); do
          if [ "$(dspmq -m $qm | grep -o 'STATUS([^)]*)' | sed 's/STATUS(\(.*\))/\1/')" = "Running" ]; then
            echo "Parando Queue Manager: $qm"
            endmqm $qm
            sleep 5
          fi
        done
      register: stop_qm_rollback
      ignore_errors: true

    - name: "Aguardar parada completa"
      wait_for:
        timeout: 60
      when: stop_qm_rollback is defined

    - name: "Restaurar backup da instalação (se disponível)"
      shell: |
        if [ -f "/var/backup/mq/mq_installation_backup_{{ updatemq_version }}_*.tar.gz" ]; then
          BACKUP_FILE=$(find /var/backup/mq -name "mq_installation_backup_{{ updatemq_version }}_*.tar.gz" | head -1)
          echo "Restaurando backup: $BACKUP_FILE"
          rm -rf /opt/mqm
          tar -xzf "$BACKUP_FILE" -C /
          mv /opt/mqm_backup_{{ updatemq_version }}_* /opt/mqm
          echo "Backup restaurado com sucesso"
        else
          echo "Backup de instalação não encontrado"
          exit 1
        fi
      register: restore_installation
      ignore_errors: true

    - name: "Restaurar dados do MQ (se disponível)"
      shell: |
        if [ -f "/var/backup/mq/updatemq_{{ updatemq_version }}/*/mq_data_*.tar.gz" ]; then
          BACKUP_FILE=$(find /var/backup/mq/updatemq_{{ updatemq_version }} -name "mq_data_*.tar.gz" | head -1)
          echo "Restaurando dados: $BACKUP_FILE"
          tar -xzf "$BACKUP_FILE" -C /
          echo "Dados restaurados com sucesso"
        else
          echo "Backup de dados não encontrado"
        fi
      register: restore_data
      ignore_errors: true

    - name: "Restaurar configurações do sistema (se disponível)"
      shell: |
        if [ -f "/var/backup/mq/system_config_{{ updatemq_version }}_*.tar.gz" ]; then
          BACKUP_FILE=$(find /var/backup/mq -name "system_config_{{ updatemq_version }}_*.tar.gz" | head -1)
          echo "Restaurando configurações: $BACKUP_FILE"
          tar -xzf "$BACKUP_FILE" -C /
          echo "Configurações restauradas com sucesso"
        else
          echo "Backup de configurações não encontrado"
        fi
      register: restore_config
      ignore_errors: true

    - name: "Verificar integridade após rollback"
      command: dspmqver
      register: rollback_version_check
      ignore_errors: true

    - name: "Iniciar Queue Managers após rollback"
      shell: |
        for qm in $(dspmq | grep -o 'QMNAME([^)]*)' | sed 's/QMNAME(\(.*\))/\1/'); do
          if [ "$(dspmq -m $qm | grep -o 'STATUS([^)]*)' | sed 's/STATUS(\(.*\))/\1/')" != "Running" ]; then
            echo "Iniciando Queue Manager: $qm"
            strmqm $qm
            sleep 10
          fi
        done
      register: start_qm_rollback
      ignore_errors: true

    - name: "Aguardar inicialização"
      wait_for:
        timeout: 120
      when: start_qm_rollback is defined

    - name: "Verificar status final após rollback"
      shell: dspmq
      register: final_rollback_status

    - name: "Executar testes básicos pós-rollback"
      shell: |
        for qm in $(dspmq | grep -o 'QMNAME([^)]*)' | sed 's/QMNAME(\(.*\))/\1/'); do
          echo "DISPLAY QMGR" | runmqsc $qm 2>/dev/null | head -1
        done
      register: rollback_tests
      ignore_errors: true

    - name: "Criar relatório de rollback"
      copy:
        content: |
          # Relatório de Rollback IBM MQ
          Data: {{ ansible_date_time.iso8601 }}
          Host: {{ inventory_hostname }}
          Versão Update: {{ updatemq_version }}
          
          ## Backups Disponíveis:
          {{ available_backups.files | map(attribute='path') | join('\n') if available_backups.files is defined else 'Nenhum backup encontrado' }}
          
          ## Processo de Rollback:
          - Parada dos QMs: {{ 'SUCESSO' if stop_qm_rollback.rc == 0 else 'FALHA' }}
          - Restauração da Instalação: {{ 'SUCESSO' if restore_installation.rc == 0 else 'FALHA' }}
          - Restauração dos Dados: {{ 'SUCESSO' if restore_data.rc == 0 else 'FALHA' }}
          - Restauração das Configurações: {{ 'SUCESSO' if restore_config.rc == 0 else 'FALHA' }}
          - Inicialização dos QMs: {{ 'SUCESSO' if start_qm_rollback.rc == 0 else 'FALHA' }}
          
          ## Verificações:
          - Versão Após Rollback: {{ rollback_version_check.stdout_lines[0] if rollback_version_check.stdout_lines is defined else 'N/A' }}
          - Status dos QMs: {{ final_rollback_status.stdout if final_rollback_status.stdout is defined else 'N/A' }}
          - Testes de Conectividade: {{ rollback_tests.stdout if rollback_tests.stdout is defined else 'N/A' }}
          
          ## Status do Rollback:
          - Rollback: {{ 'SUCESSO' if stop_qm_rollback.rc == 0 and start_qm_rollback.rc == 0 and rollback_tests.rc == 0 else 'FALHA' }}
        dest: "/var/log/ansible/updatemq/updatemq_{{ updatemq_version }}/rollback_report_{{ ansible_date_time.iso8601_basic }}.txt"
        owner: mqm
        group: mqm
        mode: '0644'

    - name: "Mostrar resultado do rollback"
      debug:
        msg: |
          === RESULTADO DO ROLLBACK ===
          Host: {{ inventory_hostname }}
          Status: {{ 'SUCESSO' if stop_qm_rollback.rc == 0 and start_qm_rollback.rc == 0 and rollback_tests.rc == 0 else 'FALHA' }}
          Versão Após Rollback: {{ rollback_version_check.stdout_lines[0] if rollback_version_check.stdout_lines is defined else 'N/A' }}
          QMs Ativos: {{ final_rollback_status.stdout_lines | select('search', 'Running') | list | length if final_rollback_status.stdout_lines is defined else 0 }}

    - name: "Registrar resultado do rollback"
      set_fact:
        rollback_result:
          status: "{{ 'success' if stop_qm_rollback.rc == 0 and start_qm_rollback.rc == 0 and rollback_tests.rc == 0 else 'failed' }}"
          version_after_rollback: "{{ rollback_version_check.stdout_lines[0] if rollback_version_check.stdout_lines is defined else 'N/A' }}"
          qms_running: "{{ final_rollback_status.stdout_lines | select('search', 'Running') | list | length if final_rollback_status.stdout_lines is defined else 0 }}"
          timestamp: "{{ ansible_date_time.iso8601 }}"
